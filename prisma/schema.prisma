generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                  Int               @id
  originator          String            @db.VarChar(64)
  name                String            @db.VarChar
  state               ProjectState      @default(SUBMITTED)
  description         String?
  location            String            @default("")
  images              String[]
  videos              String[]
  documents           String[]
  type                ProjectType       @default(AGRICULTURE_FORESTRY_AND_OTHER_LAND_USE)
  registryDetails     RegistryDetails[]
  sdgDetails          SdgDetails[]
  royalties           Royalties[]
  batchGroups         BatchGroups[]
  createdAt           DateTime          @db.Timestamp(6)
  updatedAt           DateTime?         @db.Timestamp(6)
  approved            Boolean?          @default(false)
  listedToMarketplace Boolean           @default(false)
}

// model Location {
//   id        Int      @id @default(autoincrement())
//   latitude  Float
//   longitude Float
//   projectId Int?
//   project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
// }

model BatchGroups {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar
  uuid        String?
  assetId     Int      @unique
  totalSupply Int?
  minted      Int?
  isMinted    Boolean? @default(false)
  retired     Int?
  groupId     Int?
  batches     Batch[]
  projectId   Int?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Batch {
  id           Int     @id @default(autoincrement())
  name         String? @db.VarChar
  uuid         String?
  issuanceYear Int?
  startDate    Int?
  endDate      Int?
  totalSupply  Int?
  minted       Int?
  retired      Int?
  groupId      Int?

  batchGroupId Int
  batchGroups  BatchGroups @relation(fields: [batchGroupId], references: [id], onDelete: Cascade)
}

model RegistryDetails {
  id         String        @id @default(uuid())
  name       String
  summary    String
  regName    RegistryName?
  registryId Int           @unique
  project    Project       @relation(fields: [registryId], references: [id], onDelete: Cascade)
}

model Royalties {
  id            Int    @id @default(autoincrement())
  projectId     Int
  accountId     String @db.VarChar(64)
  percentOfFees Float? @db.Real

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SdgDetails {
  id          Int      @id @default(autoincrement())
  projectId   Int
  sdgType     SdgType?
  description String?
  references  String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, sdgType], name: "sdgIdentifier")
}

model Profil {
  address              String  @id
  firstName            String?
  lastName             String?
  avatar               String?
  orginatorName        String? @default("")
  orginatorDescription String? @default("")

  email           String?
  emailStatus     VerificationStatus @default(NOT_VERIFIED)
  emailVerifiedAt DateTime?

  activityTransactionReceipts Boolean  @default(false)
  activityOffersFilled        Boolean  @default(false)
  marketingNews               Boolean  @default(false)
  userType                    UserType @default(Individual)

  investments        Investment[]

  stars     Star[]
  KYC       KYC?
  cartItems CartItem[]
}

model Investment {
  id                   String                 @id @default(uuid())
  projectId            Int
  addressProjectId     String?                @unique @default(uuid())
  creditsOwned         Int
  totalValue           Float                  @default(0)
  retiredCredits       Int
  creditsOwnedPerGroup CreditsOwnedPerGroup[]
  creditPrice          Float // Brauch ich evt nicht mehr, da in buyorder drin
  quantity             Int
  sellorders           SellOrder[]
  buyOrders            BuyOrder[]             @relation("investment")
  // buyOrdersForRetire BuyOrder[]  @relation("investmentForRetire")
  Profil               Profil?                @relation(fields: [profilAddress], references: [address], onDelete: Cascade)
  profilAddress        String?
}

model CreditsOwnedPerGroup {
  id             String      @id @default(uuid())
  addressGroupId String?     @unique
  creditsOwned   Int
  groupId        Int
  Investment     Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId   String?
}

model BuyOrder {
  id             Int         @id @default(autoincrement())
  creditsOwned   Int
  retiredCredits Int
  creditPrice    Float
  orderId        Int         @unique
  groupId        Int //notwendig, da man sonst die einzelnen KÃ¤ufe nicht den Gruppen zuordnen kann
  createdAt      DateTime    @db.Timestamp(6)
  Investment     Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade, name: "investment")
  investmentId   String?
}

model BuyOrderReserved {
  id          Int      @id @default(autoincrement())
  quantity    Int
  creditPrice Float
  adress      String
  buyorderId  Int
  projectId   Int
  sellorderId Int
  createdAt   DateTime @db.Timestamp(6)
}

model SellOrder {
  orderId      Int         @id
  assetId      Int
  units        Int
  groupId      Int?
  unitsRemain  Int         @default(0)
  pricePerUnit Float
  isCancel     Boolean?    @default(false)
  isSold       Boolean?    @default(false)
  owner        String
  createdAt    DateTime    @db.Timestamp(6)
  cancelledAt  DateTime?   @db.Timestamp(6)
  Investment   Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId String?
}

model CartItem {
  id              Int           @id @default(autoincrement())
  projectName     String
  projectImageUrl String        @default("")
  projectPrices   Float[]
  projectId       Int
  batchEntities   BatchEntity[]
  profilId        String
  profil          Profil        @relation(fields: [profilId], references: [address], onDelete: Cascade)
}

model BatchEntity {
  id            Int      @id @default(autoincrement())
  calls         String[]
  quantity      Int
  assetId       Int
  creditPrice   Float
  issuanceYear  Int?
  batchEntityId Int
  CartItem      CartItem @relation(fields: [batchEntityId], references: [id], onDelete: Cascade)
}

model KYC {
  profilAddress String             @id
  status        VerificationStatus @default(NOT_VERIFIED)
  FirstName     String?
  LastName      String?
  Address       String?
  Country       String?
  Profil        Profil?            @relation(fields: [profilAddress], references: [address], onDelete: Cascade)
  FractalId     String?
}

model Star {
  profilAddress String
  projectId     Int
  profil        Profil @relation(fields: [profilAddress], references: [address], onDelete: Cascade)

  @@id([profilAddress, projectId])
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
  REJECTED
}

enum SdgType {
  NoPoverty
  ZeroHunger
  GoodHealthAndWellBeing
  QualityEducation
  GenderEquality
  CleanWaterAndSanitation
  AffordableAndCleanEnergy
  DecentWorkAndEconomicGrowth
  IndustryInnovationAndInfrastructure
  ReducedInequalities
  SustainableCitiesAndCommunities
  ResponsibleConsumptionAndProduction
  ClimateAction
  LifeBelowWater
  LifeOnLand
  PeaceJusticeAndStrongInstitutions
  ParternshipsForTheGoals
}

enum UserType {
  Individual
  Originator
}

enum ProjectState {
  DRAFT
  SUBMITTED
  ACCEPTED
  DECLINED
}

enum RegistryName {
  Verra
  GoldStandard
  AmericanCarbonRegistry
  ClimateActionReserve
}

enum ProjectType {
  AGRICULTURE_FORESTRY_AND_OTHER_LAND_USE
  CHEMICAL_INDUSTRY
  ENERGY_DEMAND
  ENERGY_DISTRIBUTION
  ENERGY_INDUSTRIES
  FUGITIVE_EMISSIONS_FROM_FUELS
  FUGITIVE_EMISSIONS_FROM_CARBONS
  LIVESTOCK
  MANUFACTURING_INDUSTRIES
  METAL_PRODUCTION
  MINING_MINERAL_PRODUCTION
  TRANSPORT
  WASTE_HANDLING
}

model Asset {
  id           Int     @id
  owner        String? @db.VarChar(48)
  issuer       String? @db.VarChar(48)
  admin        String? @db.VarChar(48)
  freezer      String? @db.VarChar(48)
  supply       Int?
  deposit      Int?
  minBalance   Int?
  isSufficient Boolean @default(false)
  accounts     Int?
  sufficients  Int?
  approvals    Int?
  isFrozen     Boolean @default(false)
  kyc_required Boolean @default(true)
}

model AssetTransaction {
  id            Int        @id @default(autoincrement())
  hash          String     @db.VarChar(68)
  blockNumber   Int        @default(0)
  type          AssetTransactionType
  from          String     @default("") @db.VarChar(48)
  to            String     @default("") @db.VarChar(48)
  owner         String     @default("") @db.VarChar(48)
  projectId     Int?
  assetId       Int?
  amount        Int
  pricePerUnit  String?
  feesPaid      String?
  createdAt     DateTime   @db.Timestamp(6)

  @@unique([hash, owner], name: "uniqueId")
}

enum AssetTransactionType {
  SENT
  RECEIVED
  PURCHASED
  SOLD
  RETIRED
  ISSUED
  ORDER_CREATED
  ORDER_CANCELLED
}

model TokenTransaction {
  id          Int      @id @default(autoincrement())
  hash        String   @unique @db.VarChar(68)
  blockNumber Int      @default(0)
  from        String   @default("") @db.VarChar(48)
  to          String   @default("") @db.VarChar(48)
  tokenId     String   @default("")
  tokenName   String?
  tokenLogo   String?
  amount      String?
  createdAt   DateTime @db.Timestamp(6)
}

model ExchangeRate {
  id               Int   @id @default(autoincrement())
  exchangeRateDOT  Float
  exchangeRateUSDT Float
}

model Transaction {
  id          Int      @id @default(autoincrement())
  blockNumber Int
  hash        String   @unique @db.VarChar(68)
  from        String   @db.VarChar(64)
  to          String   @db.VarChar(64)
  amount      String   @db.VarChar(191)
  gasFees     Decimal  @default(0) @db.Decimal(32, 0)
  createdAt   DateTime @db.Timestamp(6)
}

model Block {
  number    Int      @id
  hash      String   @unique @db.VarChar(66)
  createdAt DateTime @db.Timestamp(6)
  fetchedAt DateTime @default(now()) @db.Timestamp(6)
}