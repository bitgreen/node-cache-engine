generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                  Int               @id
  originator          String            @db.VarChar(64)
  name                String            @db.VarChar
  state               ProjectState      @default(SUBMITTED)
  description         String?
  location            Location[]
  images              String[]
  videos              String[]
  documents           String[]
  type                ProjectType       @default(AGRICULTURE_FORESTRY_AND_OTHER_LAND_USE)
  registryDetails     RegistryDetails[]
  sdgDetails          SdgDetails[]
  royalties           Royalties[]
  batchGroups         BatchGroups[]
  created             DateTime          @default(now()) @db.Timestamp(6)
  updated             DateTime?         @default(now()) @db.Timestamp(6)
  approved            Boolean?          @default(false)
  listedToMarketplace Boolean           @default(false)
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model BatchGroups {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar
  uuid        String?
  assetId     Int      @unique
  totalSupply Int?
  minted      Int?
  isMinted    Boolean? @default(false)
  retired     Int?
  batches     Batch[]
  projectId   Int?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Batch {
  id           Int     @id @default(autoincrement())
  name         String? @db.VarChar
  uuid         String? @unique
  issuanceYear Int?
  startDate    Int?
  endDate      Int?
  totalSupply  Int?
  minted       Int?
  retired      Int?

  batchGroupId Int
  batchGroups  BatchGroups @relation(fields: [batchGroupId], references: [id], onDelete: Cascade)
}

model RegistryDetails {
  id         String  @id @default(uuid())
  name       String
  summary    String
  regName    String
  registryId Int     @unique
  project    Project @relation(fields: [registryId], references: [id], onDelete: Cascade)
}

model Royalties {
  id            Int    @id @default(autoincrement())
  projectId     Int
  accountId     String @db.VarChar(64)
  percentOfFees Float? @db.Real

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SdgDetails {
  id          Int      @id @default(autoincrement())
  projectId   Int
  sdgType     SdgType?
  description String?
  references  String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Profil {
  address   String  @id
  firstName String?
  lastName  String?
  avatar    String?

  email           String?            @unique
  emailStatus     VerificationStatus @default(NOT_VERIFIED)
  emailVerifiedAt DateTime?

  activityTransactionReceipts Boolean @default(false)
  activityOffersFilled        Boolean @default(false)
  marketingNews               Boolean @default(false)
  isOriginator                Boolean @default(false)

  investments        Investment[]
  createdProjects    Int[]
  creditTransactions CreditTransaction[]

  stars     Star[]
  KYC       KYC?
  cartItems CartItem[]
}

model Investment {
  id             String      @id @default(uuid())
  projectId      Int
  creditsOwned   Int
  retiredCredits Int
  creditPrice    Float // Brauch ich evt nicht mehr, da in buyorder drin
  quantity       Int
  sellorders     SellOrder[]
  buyOrders      BuyOrder[]
  Profil         Profil?     @relation(fields: [profilAddress], references: [address], onDelete: Cascade)
  profilAddress  String?
}

model BuyOrder {
  id             Int         @id @default(autoincrement())
  creditsOwned   Int
  retiredCredits Int
  creditPrice    Float
  orderId        Int
  groupId        Int //notwendig, da man sonst die einzelnen KÃ¤ufe nicht den Gruppen zuordnen kann
  created        DateTime    @default(now()) @db.Timestamp(6)
  Investment     Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId   String?
}

model SellOrder {
  orderId      Int         @id
  assetId      Int
  units        Int
  unitsRemain  Int         @default(0)
  pricePerUnit Float
  isCancel     Boolean?    @default(false)
  isSold       Boolean?    @default(false)
  owner        String
  created      DateTime    @default(now()) @db.Timestamp(6)
  Investment   Investment? @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId String?
}

model CreditTransaction {
  id            String                @id @default(uuid())
  type          CreditTransactionType
  description   String
  credits       Int
  creditPrice   Float
  from          String
  to            String
  created       DateTime              @default(now()) @db.Timestamp(6)
  fee           Float
  Profil        Profil?               @relation(fields: [profilAddress], references: [address], onDelete: Cascade)
  profilAddress String?
}

model CartItem {
  id              Int           @id @default(autoincrement())
  projectName     String
  projectImageUrl String        @default("")
  projectPrices   Float[]
  projectId       Int
  batchEntities   BatchEntity[]
  profilId        String
  profil          Profil        @relation(fields: [profilId], references: [address], onDelete: Cascade)
}

model BatchEntity {
  id            Int      @id @default(autoincrement())
  orderId       Int
  quantity      Int
  assetId       Int
  creditPrice   Float
  issuanceYear  Int?
  batchEntityId Int
  CartItem      CartItem @relation(fields: [batchEntityId], references: [id], onDelete: Cascade)
}

model KYC {
  profilAddress String             @id
  status        VerificationStatus @default(NOT_VERIFIED)
  FirstName     String
  LastName      String
  Address       String
  Country       String
  Profil        Profil?            @relation(fields: [profilAddress], references: [address], onDelete: Cascade)
}

model Star {
  profilAddress String
  projectId     Int
  profil        Profil @relation(fields: [profilAddress], references: [address], onDelete: Cascade)

  @@id([profilAddress, projectId])
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
}

enum SdgType {
  NoPoverty
  ZeroHunger
  GoodHealthAndWellBeing
  QualityEducation
  GenderEquality
  CleanWaterAndSanitation
  AffordableAndCleanEnergy
  DecentWorkAndEconomicGrowth
  IndustryInnovationAndInfrastructure
  ReducedInequalities
  SustainableCitiesAndCommunities
  ResponsibleConsumptionAndProduction
  ClimateAction
  LifeBelowWater
  LifeOnLand
  PeaceJusticeAndStrongInstitutions
  ParternshipsForTheGoals
}

enum ProjectState {
  DRAFT
  SUBMITTED
  ACCEPTED
  DECLINED
}

enum RegistryName {
  Verra
  GoldStandard
  AmericanCarbonRegistry
  ClimateActionReserve
}

enum ProjectType {
  AGRICULTURE_FORESTRY_AND_OTHER_LAND_USE
  CHEMICAL_INDUSTRY
  ENERGY_DEMAND
  ENERGY_DISTRIBUTION
  ENERGY_INDUSTRIES
  FUGITIVE_EMISSIONS_FROM_FUELS
  FUGITIVE_EMISSIONS_FROM_CARBONS
  LIVESTOCK
  MANUFACTURING_INDUSTRIES
  METAL_PRODUCTION
  MINING_MINERAL_PRODUCTION
  TRANSPORT
  WASTE_HANDLING
}

model Asset {
  id           Int     @id
  owner        String? @db.VarChar(48)
  issuer       String? @db.VarChar(48)
  admin        String? @db.VarChar(48)
  freezer      String? @db.VarChar(48)
  supply       Int?
  deposit      Int?
  minBalance   Int?
  isSufficient Boolean @default(false)
  accounts     Int?
  sufficients  Int?
  approvals    Int?
  isFrozen     Boolean @default(false)
  kyc_required Boolean @default(true)
}

model AssetTransaction {
  id          Int      @id @default(autoincrement())
  blockNumber Int
  hash        String   @unique @db.VarChar(66)
  sender      String   @db.VarChar(48)
  recipient   String   @db.VarChar(48)
  amount      Int
  assetId     Int
  createdAt   DateTime @db.Timestamp(6)
}

enum CreditTransactionType {
  PURCHASE
  SALE
  RETIRE
}

model Transaction {
  id          Int      @id @default(autoincrement())
  blockNumber Int
  hash        String   @unique @db.VarChar(66)
  sender      String   @db.VarChar(64)
  recipient   String   @db.VarChar(64)
  // amount      Decimal  @db.Decimal(65, 0)
  amount      String   @db.VarChar(191)
  gasFees     Decimal  @default(0) @db.Decimal(32, 0)
  createdAt   DateTime @db.Timestamp(6)
}

model Block {
  id          Int      @id @default(1)
  hash        String   @unique @db.VarChar(66)
  count       Int
  blockNumber Int
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}
